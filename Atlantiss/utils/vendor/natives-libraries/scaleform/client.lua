---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Dylan Malandain.
--- DateTime: 20/07/2019 14:47
---

---@type table
Scaleform = {}

---CallScaleformMethod
---@param scaleform string
---@param method string
---@return nil
---@public
function Scaleform:CallScaleformMethod(scaleform, method, ...)
    ---@type table
    local t
    ---@type table
    local args = { ... }
    BeginScaleformMovieMethod(scaleform, method)
    for k, v in ipairs(args) do
        t = type(v)
        if t == 'string' then
            PushScaleformMovieMethodParameterString(v)
        elseif t == 'number' then
            if string.match(tostring(v), "%.") then
                PushScaleformMovieFunctionParameterFloat(v)
            else
                PushScaleformMovieFunctionParameterInt(v)
            end
        elseif t == 'boolean' then
            PushScaleformMovieMethodParameterBool(v)
        end
    end
    EndScaleformMovieMethod()
end

---CallScaleformMethod
---@param scaleform string
---@param method string
---@return nil
---@public
function CallScaleformMethod(scaleform, method, ...)
    ---@type table
    local t
    ---@type table
    local args = { ... }
    BeginScaleformMovieMethod(scaleform, method)
    for k, v in ipairs(args) do
        t = type(v)
        if t == 'string' then
            PushScaleformMovieMethodParameterString(v)
        elseif t == 'number' then
            if string.match(tostring(v), "%.") then
                PushScaleformMovieFunctionParameterFloat(v)
            else
                PushScaleformMovieFunctionParameterInt(v)
            end
        elseif t == 'boolean' then
            PushScaleformMovieMethodParameterBool(v)
        end
    end
    EndScaleformMovieMethod()
end

---CreateNamedRenderTargetForModel
---@param Name string
---@param Model string
---@return function
---@public
function CreateNamedRenderTargetForModel(Name, Model)
    ---@type number
    local Handle = 0
    if not IsNamedRendertargetRegistered(Name) then
        RegisterNamedRendertarget(Name, 0)
    end
    if not IsNamedRendertargetLinked(Model) then
        LinkNamedRendertarget(Model)
    end
    if IsNamedRendertargetRegistered(Name) then
        Handle = GetNamedRendertargetRenderId(Name)
    end
    return Handle
end


function SetScaleformParams(scaleform, data)
    data = data or {}
    for k, v in pairs(data) do
        PushScaleformMovieFunction(scaleform, v.name)
        if v.param then
            for _, par in pairs(v.param) do
                if math.type(par) == "integer" then
                    PushScaleformMovieFunctionParameterInt(par)
                elseif type(par) == "boolean" then
                    PushScaleformMovieFunctionParameterBool(par)
                elseif math.type(par) == "float" then
                    PushScaleformMovieFunctionParameterFloat(par)
                elseif type(par) == "string" then
                    PushScaleformMovieFunctionParameterString(par)
                end
            end
        end
        if v.func then
            v.func()
        end
        PopScaleformMovieFunctionVoid()
    end
end

function createScaleform(name, data)
    if not name or string.len(name) <= 0 then
        return
    end
    local scaleform = Streaming:Scaleform(name)
    SetScaleformParams(scaleform, data)
    return scaleform
end


local bank = {
    label = "Compte personnel",
    amount = 5420,
    logs = {
        {0,100,"blabla"},
        {1,900,"blabla"},
        {2,800,"blabla"},
    }
}



--
local scaleforms = {}
local currentScaleform = {}
function RegisterScaleform(stringName, data)
	scaleforms[stringName] = data
end

local function ToggleScaleform(stringName, data, boolClose)
	if currentScaleform then
		if scaleforms[currentScaleform.id] and scaleforms[currentScaleform.id].OnExit then
			scaleforms[currentScaleform.id].OnExit(currentScaleform)
		end

		if currentScaleform.handle then
			SetScaleformMovieAsNoLongerNeeded(currentScaleform.handle)
		end

		currentScaleform = {}
	end

	if boolClose or not scaleforms[stringName] then return end

	local tbl = scaleforms[stringName]
	currentScaleform.handle = createScaleform(stringName, tbl.create)
	currentScaleform.id = stringName
	currentScaleform.data = data or {}

	if tbl.onOpen then
		tbl.onOpen(currentScaleform)
	end
end

AddEventHandler("toggleScaleform", ToggleScaleform)

Citizen.CreateThread(function()
	while true do
		Citizen.Wait(0)

		if currentScaleform and currentScaleform.handle and HasScaleformMovieLoaded(currentScaleform.handle) then
			local sc = scaleforms[currentScaleform.id]
			HideHudAndRadarThisFrame()
			ShowCursorThisFrame()
			if sc and sc.fullscreen then
				DrawScaleformMovieFullscreen(currentScaleform.handle, 255, 255, 255, 255)
			else
				DrawScaleformMovie(currentScaleform.handle, 0.5, 0.5, 0.9, 0.9, 255, 255, 255, 255)
			end

			if sc and sc.OnTick then
				sc.OnTick(currentScaleform)
			end
		end
	end
end)


local currentMenu = 0
local gaps = {10, 50, 100, [5] = 1000, [6] = 10000}
local currantGaps = {}
local b = false
local function ShowFrameAccount(scaleform, boolDeposit)
    b = boolDeposit
	SetScaleformParams(scaleform.handle, {
		{ name = "SET_DATA_SLOT_EMPTY", param = {} },
		{ name = "SET_DATA_SLOT", param = {0, boolDeposit and "Déposer" or "Retirer"} },
	})

	local maxAmount, params = boolDeposit and Money.amount or bank.amount, {}
	currantGaps = {}
    --print(maxAmount)
	for k,v in pairs(gaps) do
		if v < maxAmount then
			params[k] = { name = "SET_DATA_SLOT", param = {k, v} }
			currantGaps[k] = v
		end
	end

	params[4] = { name = "SET_DATA_SLOT", param = {4, "Retour"} }

	local bankIndex = #params + 1
	params[bankIndex] = { name = "SET_DATA_SLOT", param = { bankIndex, maxAmount} }
	currantGaps[bankIndex] = maxAmount

	params[#params + 1] = { name = "DISPLAY_CASH_OPTIONS", param = {} }
	SetScaleformParams(scaleform.handle, params)

	currentMenu = boolDeposit and 2 or 1
end

local function ShowValidFrame(scaleform, question)
	SetScaleformParams(scaleform.handle, {
		{ name = "SET_DATA_SLOT_EMPTY", param = {} },
		{ name = "SET_DATA_SLOT", param = {0, question or "Voulez-vous vraiment ?"} },
		{ name = "SET_DATA_SLOT", param = {1, validate or "Valider"} },
		{ name = "SET_DATA_SLOT", param = {2, cancel or "Annuler"} },
		{ name = "DISPLAY_MESSAGE", param = {} },
	})

	currentMenu = 5
end

local function ShowHistorique(scaleform, logs)
	SetScaleformParams(scaleform.handle, {
		{ name = "SET_DATA_SLOT_EMPTY", param = {} },
		{ name = "SET_DATA_SLOT", param = {0, "Historique"} },
		{ name = "SET_DATA_SLOT", param = {1, "Retour"} },
	})

    logs = bank.logs
    --print(scaleform.handle)
	for k,v in pairs(logs) do
		PushScaleformMovieFunction(scaleform.handle, "SET_DATA_SLOT")
		PushScaleformMovieFunctionParameterInt(1 + k)
		PushScaleformMovieFunctionParameterInt(v[1]) -- retrait ou virement BL
		PushScaleformMovieFunctionParameterString(v[2]) -- montant
		PushScaleformMovieFunctionParameterString(v[3]) -- texte
		PopScaleformMovieFunctionVoid()
	end

	PushScaleformMovieFunction(scaleform.handle, "DISPLAY_TRANSACTIONS")
	PopScaleformMovieFunctionVoid()

	currentMenu = 3
end

local function ATMBack(scaleform)
	PlaySoundFrontend(-1, "PIN_BUTTON", "ATM_SOUNDS", true)
	if currentMenu == 0 then TriggerEvent("toggleScaleform", scaleform.id, false, true) return end

	SetScaleformParams(scaleform.handle, {
		{ name = "SET_DATA_SLOT_EMPTY", param = {} },
		{ name = "SET_DATA_SLOT", param = {0, "Actions"} },
		{ name = "SET_DATA_SLOT", param = {1, "Déposer"} },
		{ name = "SET_DATA_SLOT", param = {2, "Retirer"} },
		{ name = "SET_DATA_SLOT", param = {3, "Historique"} },
		{ name = "DISPLAY_MENU", param = {} },
	})

	currentMenu = 0
end

local function HandleATMControls(scaleform)
	EnableControlAction(2, 199, 1)
	EnableControlAction(2, 188, 1)
	EnableControlAction(2, 187, 1)
	EnableControlAction(2, 189, 1)
	EnableControlAction(2, 190, 1)

	if IsControlJustPressed(2, 188) then
		PushScaleformMovieFunction(scaleform.handle, "SET_INPUT_EVENT")
		PushScaleformMovieFunctionParameterInt(8)
		PopScaleformMovieFunctionVoid()
	end
	if IsControlJustPressed(2, 187) then
		PushScaleformMovieFunction(scaleform.handle, "SET_INPUT_EVENT")
		PushScaleformMovieFunctionParameterInt(9)
		PopScaleformMovieFunctionVoid()
	end
	if IsControlJustPressed(2, 189) then
		PushScaleformMovieFunction(scaleform.handle, "SET_INPUT_EVENT")
		PushScaleformMovieFunctionParameterInt(10)
		PopScaleformMovieFunctionVoid()
	end
	if IsControlJustPressed(2, 190) then
		PushScaleformMovieFunction(scaleform.handle, "SET_INPUT_EVENT")
		PushScaleformMovieFunctionParameterInt(11)
		PopScaleformMovieFunctionVoid()
	end

	EnableControlAction(2, 239, 1)
	EnableControlAction(2, 240, 1)

	local x, y = GetDisabledControlNormal(2, 239), GetDisabledControlNormal(2, 240)
	PushScaleformMovieFunction(scaleform.handle, "SET_MOUSE_INPUT")
	PushScaleformMovieFunctionParameterFloat(x)
	PushScaleformMovieFunctionParameterFloat(y)
	PopScaleformMovieFunctionVoid()

	DisableAllControlActions(0)
	DisableControlAction(2, 200, 1)

	EnableControlAction(2, 237, 1)
	EnableControlAction(2, 202, 1)
	EnableControlAction(2, 238, 1)

	if IsControlJustPressed(2, 237) then
		Citizen.CreateThread(function()
			PushScaleformMovieFunction(scaleform.handle, "GET_CURRENT_SELECTION")
			local a = EndScaleformMovieMethodReturn()
			while not GetScaleformMovieFunctionReturnBool(a) do
				Citizen.Wait(0)
			end

			local result = GetScaleformMovieFunctionReturnInt(a)
			if currentMenu == 0 then
				if result == 1 then -- depot
					ShowFrameAccount(scaleform, true)
				elseif result == 2 then -- retrait
					ShowFrameAccount(scaleform)
				elseif result == 3 then
					ShowHistorique(scaleform)
				end
			elseif currentMenu == 2 or currentMenu == 1 then -- retrait
				if result == 4 then
					ATMBack(scaleform)
				else
                    local amount = currantGaps[result] or currentMenu == 2 and Money.amount or bank.amount 
                    
                    if b and  amount and amount > 0 then 
                        bank.amount  = bank.amount  + amount
                    elseif amount and amount > 0 then 
                        bank.amount  = bank.amount  - amount
                    end
				end
			elseif currentMenu == 3 then -- historique
				if result == 1 then
					ATMBack(scaleform)
				end
			end
		end)
	end

	if IsControlJustPressed(2, 202) or IsControlJustPressed(2, 238) then
		ATMBack(scaleform)
	end

	if not scaleform.a or scaleform.a <= GetGameTimer() then
		scaleform.a = GetGameTimer() + 1000
		SetScaleformParams(scaleform.handle, {
			{ name = "DISPLAY_BALANCE", param = {bank.label, "Banque", bank.amount } }
		})
	end
end

RegisterScaleform("ATM", {
	create =  {
		{ name = "SET_DATA_SLOT_EMPTY", param = {} },
		{ name = "SET_DATA_SLOT", param = {0, "Actions"} },
		{ name = "SET_DATA_SLOT", param = {1, "Déposer"} },
		{ name = "SET_DATA_SLOT", param = {2, "Retirer"} },
		{ name = "SET_DATA_SLOT", param = {3, "Historique"} },
		{ name = "DISPLAY_MENU", param = {} },
		{ name = "DISPLAY_BALANCE", param = {"Compte personnel", "Banque", "0"} },
	},
	onOpen = function(scaleform)
		currentMenu = 0
		SetScaleformParams(scaleform.handle, { { name = "DISPLAY_BALANCE", param = {bank.label, "Banque", bank.amount }} })
	end,
	OnTick = HandleATMControls
})



--TriggerEvent("toggleScaleform", "ATM")