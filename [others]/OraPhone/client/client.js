/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./anim.js":
/*!*****************!*\
  !*** ./anim.js ***!
  \*****************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n// To introduce async delay\nconst Delay = (ms) => new Promise(res => setTimeout(res, ms));\n\n\nlet myPedId = null\n\n\n//\"prop_amb_phone\"\n// OR \"prop_npc_phone\"\n// OR \"prop_cs_phone_01\"\n// OR \"prop_npc_phone_02\"\nconst phoneModel = \"prop_amb_phone\"\nlet phoneProp = 0\n\nlet currentStatus = \"out\"\nlet lastDict = null\nlet lastAnim = null\n\nlet ANIMS = {\n    \"cellphone@\": {\n        \"out\": {\n            \"text\": \"cellphone_text_in\",\n            \"call\": \"cellphone_call_listen_base\"\n        },\n        \"text\": {\n            \"out\": \"cellphone_text_out\",\n            \"text\": \"cellphone_text_in\",\n            \"call\": \"cellphone_text_to_call\"\n        },\n        \"call\": {\n            \"out\": \"cellphone_call_out\",\n            \"text\": \"cellphone_call_to_text\",\n            \"call\": \"cellphone_text_to_call\"\n        }\n    },\n    \"anim@cellphone@in_car@ps\": {\n        \"out\": {\n            \"text\": \"cellphone_text_in\",\n            \"call\": \"cellphone_call_in\"\n        },\n        \"text\": {\n            \"out\": \"cellphone_text_out\",\n            \"text\": \"cellphone_text_in\",\n            \"call\": \"cellphone_text_to_call\"\n        },\n        \"call\": {\n            \"out\": \"cellphone_horizontal_exit\",\n            \"text\": \"cellphone_call_to_text\",\n            \"call\": \"cellphone_text_to_call\"\n        }\n    }\n}\n\nasync function newPhoneProp() {\n    deletePhone()\n    let modelHash = GetHashKey(phoneModel)\n    if(modelHash && IsModelInCdimage(modelHash) && !HasModelLoaded(modelHash)) {\n        RequestModel(modelHash)\n        while(!HasModelLoaded(modelHash)) { await Delay(100) }\n    }\n    exports[\"Ora\"].TriggerServerCallback(\"Ora::SE::Anticheat:RegisterObject\", \n        function() {\n            let ped = PlayerPedId()\n            let [x,y,z] = GetEntityCoords(ped)\n            phoneProp = CreateObject(modelHash, x, y, z + 0.2, true, true, true)\n            let bone = GetPedBoneIndex(ped, 28422)\n            AttachEntityToEntity(phoneProp, ped, bone, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 0, 0, 2, 1)\n        },\n        modelHash\n    )\n}\n\nfunction deletePhone() {\n    if(phoneProp != 0) {\n        DeleteObject(phoneProp)\n        phoneProp = 0\n    }\n}\n\n/*////\n\tout || text || Call ||\n//*///\nasync function PhonePlayAnim(state, freeze, force) {\n    if(currentStatus == state && force != true) {\n        return\n    }\n\n    myPedId = PlayerPedId()\n    freeze = freeze ?? false\n\n    let dict = \"cellphone@\"\n    if(IsPedInAnyVehicle(myPedId, false)) {\n        dict = \"anim@cellphone@in_car@ps\"\n    }\n    await loadAnimDict(dict)\n\n    let anim = ANIMS[dict][currentStatus][state]\n    if(currentStatus != \"out\") {\n        StopAnimTask(myPedId, lastDict, lastAnim, 1.0)\n    }\n    let flag = 50\n    if(freeze == true ) {\n        flag = 14\n    }\n    TaskPlayAnim(myPedId, dict, anim, 3.0, -1, -1, flag, 0, false, false, false)\n\n    if(state != \"out\" && currentStatus == \"out\" ) {\n        await Delay(380)\n        await newPhoneProp()\n    }\n\n    lastDict = dict\n    lastAnim = anim\n    currentStatus = state\n\n    if(state == \"out\" ) {\n        await Delay(180)\n        deletePhone()\n        StopAnimTask(myPedId, lastDict, lastAnim, 1.0)\n    }\n}\n\nasync function PhonePlayOut() {\n    await PhonePlayAnim(\"out\")\n}\n\nasync function PhonePlayText() {\n    await PhonePlayAnim(\"text\", false, true)\n}\n\nasync function PhonePlayCall(freeze) {\n    await PhonePlayAnim(\"call\", freeze)\n}\n\nasync function PhonePlayIn() {\n    await PhonePlayText()\n}\n\nasync function loadAnimDict(dict) {\n    RequestAnimDict(dict)\n    while(!HasAnimDictLoaded(dict)) {\n        await Delay(1)\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ PhonePlayIn, PhonePlayOut, PhonePlayText, PhonePlayCall });\n\n// Citizen.CreateThread(function ()\n// \tawait Delay(200)\n// \tPhonePlayCall()\n// \tawait Delay(2000)\n// \tPhonePlayOut()\n// \tawait Delay(2000)\n\n// \tPhonePlayText()\n// \tawait Delay(2000)\n// \tPhonePlayCall()\n// \tawait Delay(2000)\n// \tPhonePlayOut()\n// })\n\n//# sourceURL=webpack://phone_ora/./anim.js?");

/***/ }),

/***/ "./client.js":
/*!*******************!*\
  !*** ./client.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _anim_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./anim.js */ \"./anim.js\");\n/// <reference path=\"node_modules/fivem-js/lib/index.d.ts\"/>\r\n/// <reference path=\"node_modules/@citizenfx/client/natives_universal.d.ts\"/>\r\n/**\r\n * Imports\r\n */\r\n\r\n\r\nconst Wait = ms => new Promise(r=>setTimeout(r, ms))\r\n/**\r\n  * Client\r\n  */\r\nlet phoneVisible = false\r\nlet mouseFocus = false\r\nvar frontCam = false\r\nvar firstTime = false\r\nvar takePictureBool = false\r\nvar app = \"\";\r\nvar appSub = \"\";\r\nvar onTick\r\nvar onTickCamera\r\nvar phoneActive = false\r\nvar canSetPhoneVisible = true\r\n\r\nRegisterKeyMapping('phone', 'Téléphone', 'keyboard', 'f2')\r\nRegisterCommand('phone', _=>setPhoneVisible(!phoneVisible))\r\n\r\nfunction setMouseFocus(active = true) {\r\n    mouseFocus = active\r\n}\r\n\r\n// onTick timer ref\r\nasync function setPhoneVisible(visible = true) {\r\n    if((!phoneActive && !phoneVisible) || !canSetPhoneVisible) {\r\n        return\r\n    }\r\n    canSetPhoneVisible = false\r\n    phoneVisible = visible\r\n    // When we wanna show the phone\r\n    if (visible) {\r\n        // play some fivem anim\r\n        await _anim_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].PhonePlayIn()\r\n        // Give focus to Nui\r\n        SetNuiFocus(true, true)\r\n        setMouseFocus(visible)\r\n        SetNuiFocusKeepInput(visible)\r\n        // lock controls, focus nui\r\n        onTick = setTick( async () => {\r\n            // On right click in fivem focus back to the phone\r\n            // if (IsControlJustReleased(1, 25) && phoneVisible) {\r\n            //     setMouseFocus(true)\r\n            // }\r\n            // Enforce nui focus on or off\r\n            // SetNuiFocus(mouseFocus, mouseFocus)\r\n            // https://docs.fivem.net/docs/game-references/controls/\r\n            DisableAllControlActions(1)\r\n            // sprint\r\n            EnableControlAction(1, 21)\r\n            // right click to switch focus back on ui\r\n            EnableControlAction(1, 25)\r\n            EnableControlAction(1, 27)\r\n            // move\r\n            EnableControlAction(1, 30);EnableControlAction(1, 31);EnableControlAction(1, 32);EnableControlAction(1, 33);EnableControlAction(1, 34);EnableControlAction(1, 35)\r\n            // push to talk\r\n            EnableControlAction(1, 249);\r\n        })\r\n    // When we wanna hide the phone\r\n    } else {\r\n        // Play some fivem anim\r\n        await _anim_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].PhonePlayOut()\r\n        // stop blocking controls on tick\r\n        clearTick(onTick)\r\n        ClearAllPedProps(GetPlayerPed(GetPlayerFromServerId(source)));\r\n        // bring them back\r\n        EnableAllControlActions(1)\r\n    }\r\n    // Give & remove focus\r\n    SetNuiFocus(visible, visible)\r\n     // Show & hide UI\r\n    SendNUIMessage({\r\n        type: \"ui\",\r\n        display: visible\r\n    })\r\n    await Wait(600)\r\n    canSetPhoneVisible = true\r\n}\r\n\r\nfunction CellFrontCamActivate(activate) {\r\n    firstTime = false\r\n\treturn Citizen.invokeNative('0x2491A93618B7D838', activate)\r\n}\r\n\r\nDestroyMobilePhone()\r\nasync function setCamera(activate) {\r\n    if(activate) {\r\n        exports.Ora_utils.SetPlayerHUD(false)\r\n        onTickCamera = setTick(async () => {\r\n            DisableControlAction(1, 200)\r\n            if (IsControlJustPressed(1, 177)) { // -- CLOSE PHONE\r\n                DestroyMobilePhone()\r\n                CellCamActivate(false, false)\r\n                SendNUIMessage({\r\n                    type: \"cancel_picture\"\r\n                })\r\n                setPhoneVisible(true)\r\n                stopTick();\r\n                exports.Ora_utils.SetPlayerHUD(true)\r\n            }\r\n            if (IsControlJustPressed(1, 27) && firstTime == false) { // -- SELFIE MODE\r\n                firstTime = true\r\n                frontCam = !frontCam\r\n                CellFrontCamActivate(frontCam)\r\n            }\r\n            if (IsControlJustPressed(1, 18) && takePictureBool == false) { // -- TAKE PICTURE\r\n                takePictureBool = true\r\n                takePicture()\r\n            }\r\n            if (takePictureBool == false && phoneVisible == false) {\r\n                let text = \"Appuyez sur ~INPUT_CELLPHONE_UP~ pour changer la caméra\"\r\n                DisplayHelpText(text)\r\n            }\r\n            if (phoneVisible == false) {\r\n                HideHudComponentThisFrame(1)\r\n                HideHudComponentThisFrame(2)\r\n                HideHudComponentThisFrame(3)\r\n                HideHudComponentThisFrame(4)\r\n                HideHudComponentThisFrame(5)\r\n                HideHudComponentThisFrame(6)\r\n                HideHudComponentThisFrame(7)\r\n                HideHudComponentThisFrame(8)\r\n                HideHudComponentThisFrame(9)\r\n                HideHudComponentThisFrame(13)\r\n                HideHudComponentThisFrame(17)\r\n                HideHudComponentThisFrame(20)\r\n                HideHudAndRadarThisFrame()\r\n                ThefeedHideThisFrame()\r\n            }\r\n        })\r\n    } else {\r\n        clearTick(onTickCamera)\r\n    }\r\n}\r\n\r\nasync function takePicture() {\r\n    await Wait(100)\r\n    SendNUIMessage({\r\n        type: \"take_picture\",\r\n        app: app,\r\n        appSub: appSub\r\n    })\r\n    await Wait(500)\r\n    DestroyMobilePhone()\r\n    CellCamActivate(false, false)\r\n    setPhoneVisible(true)\r\n    await Wait(500)\r\n    exports.Ora_utils.SetPlayerHUD(true)\r\n}\r\n\r\nasync function stopTick() {\r\n    await Wait(100)\r\n    clearTick(onTickCamera)\r\n}\r\n\r\nfunction DisplayHelpText(str) {\r\n\tSetTextComponentFormat(\"STRING\")\r\n\tAddTextComponentString(str)\r\n\tDisplayHelpTextFromStringLabel(0, 0, 1, -1)\r\n}\r\n\r\n/**\r\n * ========================\r\n * onNet events from server\r\n * ========================\r\n */\r\n\r\n// Is the phone active ?\r\n\r\nonNet('OraPhone:client:phone_active', (active) => {\r\n    phoneActive = active\r\n    SendNUIMessage({\r\n        type: \"phoneActive\",\r\n        toggle: active\r\n    })\r\n})\r\n\r\n// User data\r\n\r\nonNet('OraPhone:updateUserData', data => {\r\n    SendNUIMessage({\r\n        type: 'updateUserData',\r\n        data: data,\r\n    })\r\n})\r\n\r\n// Contacts\r\n\r\nonNet('OraPhone:client:updateContacts', data => {\r\n    SendNUIMessage({\r\n        type: 'updateContacts',\r\n        contacts: data\r\n    })\r\n})\r\n\r\n// Phone\r\n\r\nonNet('OraPhone:client:updateCalls', data => {\r\n    SendNUIMessage({\r\n        type: 'updateCalls',\r\n        calls: data\r\n    })\r\n})\r\n\r\n// Call\r\n\r\nonNet('OraPhone:client:callStarted', _ => {\r\n    SendNUIMessage({\r\n        type: 'callStarted',\r\n    })\r\n})\r\n\r\nonNet('OraPhone:client:callFinished', _ => {\r\n    if (phoneVisible) {\r\n        _anim_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].PhonePlayIn()\r\n    }\r\n    SendNUIMessage({\r\n        type: 'callEnded',\r\n    })\r\n})\r\n\r\nonNet('OraPhone:client:receiveCall', async (fromNumber, chan, video=false) => {\r\n    SendNUIMessage({\r\n        type: 'receiveCall',\r\n        fromNumber,\r\n        channel: chan,\r\n        video,\r\n    })\r\n})\r\n\r\nonNet('OraPhone:client:receiver_offline', _ => {\r\n    SendNUIMessage({\r\n        type: 'callEnded',\r\n    })\r\n    _anim_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].PhonePlayText()\r\n})\r\n\r\n// Messages\r\n\r\nonNet('OraPhone:client:update_messages', data => {\r\n    SendNUIMessage({\r\n        type: 'update_conversations',\r\n        conversations: data\r\n    })\r\n})\r\n\r\nonNet('OraPhone:client:new_notification', data => {\r\n    SendNUIMessage({\r\n        type: 'new_notification',\r\n        notification: data\r\n    })\r\n})\r\n\r\n// Richter Motorsport\r\n\r\nonNet('OraPhone:client:richtermotorsport_update_advertisement', data => {\r\n    SendNUIMessage({\r\n        type: 'updateRichterMotorsportAdvertisement',\r\n        richterMotorsportAdvertisement: data\r\n    })\r\n})\r\n\r\n// Gallery\r\n\r\nonNet('OraPhone:client:gallery_update_photo', data => {\r\n    SendNUIMessage({\r\n        type: 'updateGalleryPhoto',\r\n        galleryPhoto: data\r\n    })\r\n})\r\n\r\n// Notes\r\n\r\nonNet('OraPhone:client:notes_refresh', data => {\r\n    SendNUIMessage({\r\n        type: 'updateNotes',\r\n        notes: data\r\n    })\r\n})\r\n\r\n/**\r\n * =============\r\n * Nui callbacks\r\n * =============\r\n */\r\n\r\n// General Phone\r\n\r\nRegisterNuiCallbackType('phone_close')\r\non('__cfx_nui:phone_close', _ => {\r\n    setPhoneVisible(false)\r\n})\r\n\r\n// User Data\r\n\r\nRegisterNuiCallbackType('request_user_data')\r\non('__cfx_nui:request_user_data', _ => {\r\n    emitNet('OraPhone:server:request_user_data')\r\n})\r\n\r\nRegisterNuiCallbackType('patch_user_data')\r\non('__cfx_nui:patch_user_data', params => {\r\n    emitNet('OraPhone:patch_user_data', params)\r\n})\r\n\r\nRegisterNuiCallbackType('send_message')\r\non('__cfx_nui:send_message', msgData => {\r\n    emitNet('OraPhone:send_message', msgData)\r\n})\r\n\r\n// Contacts\r\n\r\nRegisterNuiCallbackType('refresh_contacts')\r\non('__cfx_nui:refresh_contacts', data => {\r\n    emitNet('OraPhone:server:refresh_contacts', data)\r\n})\r\n\r\nRegisterNuiCallbackType('add_contact')\r\non('__cfx_nui:add_contact', c => {\r\n    emitNet('OraPhone:add_contact', c)\r\n})\r\n\r\nRegisterNuiCallbackType('delete_contact')\r\non('__cfx_nui:delete_contact', c => {\r\n    emitNet('OraPhone:server:delete_contact', c)\r\n})\r\n\r\nRegisterNuiCallbackType('update_contact')\r\non('__cfx_nui:update_contact', c => {\r\n    emitNet('OraPhone:server:update_contact', c)\r\n})\r\n\r\n// Call\r\n\r\nRegisterNuiCallbackType('call_number')\r\non('__cfx_nui:call_number', data => {\r\n    if (!data.targetNumber) { \r\n        console.error('call number: missing target number')\r\n        return\r\n    }\r\n    if (!data.fromNumber) {\r\n        console.error('call number: missing source number')\r\n        return\r\n    }\r\n    if (data.targetNumber == data.fromNumber) {\r\n        console.error('call number: the player is trying to call himself.')\r\n        return\r\n    }\r\n    _anim_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].PhonePlayCall()\r\n    SendNUIMessage({\r\n        type: 'call_number_response'\r\n    })\r\n    emitNet('OraPhone:server:call_number', data.fromNumber, data.targetNumber)\r\n})\r\n\r\nRegisterNuiCallbackType('accept_call')\r\non('__cfx_nui:accept_call', channel => {\r\n    if (!channel) { console.error('accept call: missing channel') }\r\n    _anim_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].PhonePlayCall()\r\n    emitNet('OraPhone:server:accept_call', channel)\r\n})\r\n\r\nRegisterNuiCallbackType('end_call')\r\non('__cfx_nui:end_call', _ => {\r\n    console.log('nui end call received')\r\n    emitNet('OraPhone:server:end_call')\r\n})\r\n\r\n// Phone\r\n\r\nRegisterNuiCallbackType('refresh_calls')\r\non('__cfx_nui:refresh_calls', data => {\r\n    emitNet('OraPhone:server:refresh_calls', data)\r\n})\r\n\r\n// Messsages\r\n\r\nRegisterNuiCallbackType('message_create_conversation')\r\non('__cfx_nui:message_create_conversation', data => {\r\n    if (!data.authors) { \r\n        console.error('missing authors')\r\n        return\r\n    }\r\n    emitNet('OraPhone:server:message_create_conversation', data)\r\n})\r\n\r\nRegisterNuiCallbackType('message_delete_conversation')\r\non('__cfx_nui:message_delete_conversation', data => {\r\n    if (!data.id && !data.number) { \r\n        console.error('missing id')\r\n        return\r\n    }\r\n    emitNet('OraPhone:server:message_delete_conversation', data)\r\n})\r\n\r\nRegisterNuiCallbackType('refresh_conversations')\r\non('__cfx_nui:refresh_conversations', data => {\r\n    emitNet('OraPhone:server:refresh_conversations', data)\r\n})\r\n\r\nRegisterNuiCallbackType('add_message')\r\non('__cfx_nui:add_message', data => {\r\n    emitNet('OraPhone:server:add_message', data)\r\n})\r\n\r\n// Richter Motorsport\r\n\r\nRegisterNuiCallbackType('refresh_richtermotorsport_advertisement')\r\non('__cfx_nui:refresh_richtermotorsport_advertisement', data => {\r\n    emitNet('OraPhone:server:refresh_richtermotorsport_advertisement', data)\r\n})\r\n\r\nRegisterNuiCallbackType('richtermotorsport_add_advertisement')\r\non('__cfx_nui:richtermotorsport_add_advertisement', data => {\r\n    let players = []\r\n    exports.Ora.TriggerServerCallback(\r\n        \"onlinePlayers:list\",\r\n        function(users) {\r\n            for (let user of users) {\r\n                players.push(user.id)\r\n            }\r\n            emitNet('OraPhone:server:richtermotorsport_add_advertisement', data, players)\r\n        }\r\n    )\r\n})\r\n\r\nRegisterNuiCallbackType('richtermotorsport_favorite_advertisement')\r\non('__cfx_nui:richtermotorsport_favorite_advertisement', data => {\r\n    emitNet('OraPhone:server:richtermotorsport_favorite_advertisement', data)\r\n})\r\n\r\nRegisterNuiCallbackType('richtermotorsport_find_job')\r\non('__cfx_nui:richtermotorsport_find_job', data => {\r\n    exports.Ora.TriggerServerCallback(\r\n        \"Ora::SVCB::Identity:Job:Get\",\r\n        function(job) {\r\n            SendNUIMessage({\r\n                type: 'updateRichterMotorsportRole',\r\n                richterMotorsportRole: [job]\r\n            })\r\n        },\r\n        GetPlayerServerId(PlayerId())\r\n    )\r\n})\r\n\r\n// Camera\r\n\r\nRegisterNuiCallbackType('camera_add_image')\r\non('__cfx_nui:camera_add_image', data => {\r\n    emitNet('OraPhone:server:camera_add_image', data)\r\n})\r\n\r\nRegisterNuiCallbackType('open_camera')\r\non('__cfx_nui:open_camera', async (data) => {\r\n    app = data.app\r\n    appSub = data.appSub\r\n    setPhoneVisible(false)\r\n    CreateMobilePhone(1)\r\n    CellCamActivate(true, true)\r\n    setCamera(true)\r\n    takePictureBool = false\r\n})\r\n\r\nRegisterNuiCallbackType('close_camera')\r\non('__cfx_nui:close_camera', async () => {\r\n    setCamera(false)\r\n})\r\n\r\n// Gallery\r\n\r\nRegisterNuiCallbackType('refresh_gallery')\r\non('__cfx_nui:refresh_gallery', data => {\r\n    emitNet('OraPhone:server:refresh_gallery', data)\r\n})\r\n\r\nRegisterNuiCallbackType('gallery_image_remove')\r\non('__cfx_nui:gallery_image_remove', data => {\r\n    emitNet('OraPhone:server:gallery_image_remove', data)\r\n})\r\n\r\n// Notes\r\n\r\nRegisterNuiCallbackType('refresh_notes')\r\non('__cfx_nui:refresh_notes', data => {\r\n    emitNet('OraPhone:server:refresh_notes', data)\r\n})\r\n\r\nRegisterNuiCallbackType('notes_add_folder')\r\non('__cfx_nui:notes_add_folder', data => {\r\n    emitNet('OraPhone:server:notes_add_folder', data)\r\n})\r\n\r\n// --- Tools\r\n\r\nRegisterNuiCallbackType('right_click')\r\non('__cfx_nui:right_click', _ => {\r\n     // right click on UI = give back focus and some controls to fivem client without hiding the phone\r\n    setMouseFocus(false)\r\n})\r\n\r\nRegisterNuiCallbackType('EnableInput')\r\non('__cfx_nui:EnableInput', _ => {\r\n    SetNuiFocusKeepInput(true)\r\n})\r\n\r\nRegisterNuiCallbackType('DisableInput')\r\non('__cfx_nui:DisableInput', _ => {\r\n    SetNuiFocusKeepInput(false)\r\n})\r\n\r\n//*// Debug\r\nRegisterNuiCallbackType('debug')\r\non('__cfx_nui:debug', data => {\r\n    console.log('Nui:debug',data.debugTitle)\r\n    delete data.debugTitle\r\n    console.log(data)\r\n})\n\n//# sourceURL=webpack://phone_ora/./client.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./client.js");
/******/ 	
/******/ })()
;